Lesestoff:
    Create Azure function: https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node
    Connect Azure Database (Cosmos db): https://learn.microsoft.com/en-us/azure/azure-functions/functions-add-output-binding-cosmos-db-vs-code?pivots=programming-language-javascript&tabs=in-process
    Valg av DB Serverless eller annen: https://learn.microsoft.com/nb-no/azure/cosmos-db/throughput-serverless
    Cosmos DB API Valg: https://learn.microsoft.com/en-us/azure/cosmos-db/choose-api
    HTTP Trigger: https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=in-process%2Cfunctionsv2&pivots=programming-language-javascript#secure-an-http-endpoint-in-production

    sql query: https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/query/getting-started
    Cosmos db API and bindings++ : https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-cosmosdb-v2?tabs=in-process%2Cextensionv4&pivots=programming-language-javascript
    



Ny versjon av BDMI medlemsregister.
    - Ble mye rot i strukturen på den forrige versjonen. Pluss at jeg nå ønsker å utvikle med react.
    - Må få samlet alle funksjoner i en Azure functions app tror jeg.
    - Sendgrid er allerede satt opp og api-key opprettet. Bruker samme der tenker jeg.
    - Samme med Cosmos DB.


22.02.2023
    - Opprettet Github repository fra denne malen: https://github.com/login?return_to=%2Fstaticwebdev%2Freact-basic%2Fgenerate
    - Klonet denne lokalt i vs code
    - Opprettet Azure static web app via vs code 
        (F1: Azure Create Static Web App. (name: bdmi, Region: West-Europe, Build preset: React, App Location: /, Build location: build))

    - Opprettet 2 stk Azure static web app functions ved å kjøre F1: Azure Static Web App: Create HTTP Function
        - DBWrite og SendEmail
        - Må nok opprette flere etterhvert (bl.a DBRead).
        - Kopierte function.json og index.js fra gamle-appen.
        - La inn application settings i Azure -portal og i local.settings.json
            - bdmiDBConnectionString og SendGridApiKey

    - Oppgraderte npm pakker pga en del advarsler under bygging.
        Fremdeles noen igjen pga nth-check som av en eller annen grunn vil degradere react-scripts fra 5.0.1 til 2.1.3
        Denne må bare ignoreres.

23.02.2023
    - Oppgraderer memberform til å benytte useState

24.02.2023
    - Prøve å få testet api'ene
    - DBWrite: sliter med å få riktig data overført. 
    Prøvd mye forskjellig, men obs obs: Må kjøre npm run build og swa-kommando ved endring!!!

25.02.2023
    - Fant ut litt mer om å sende data til api. JSON.stringify måtte gjøres litt enklere (uten {})
    - Nå må jeg bare finne ut hvordan legge til data i formData i funksjonen addMemberToDB i MemberForm.js
    - Det er jo easy-peasy. objekt.key = value 
    
28.02.2023
    - La inn litt dokumentasjon på de forskjellige funksjonene
    - Prøver å få til environment variabler.....
        Ikke rett frem det der. For en react app må key navnes REACT_APP_xxx
        Endret dette, uten at det hjalp. Prøvd å legge til local.settings.json i src mappa
        Det fungerte heller ikke. Prøver nå å legge i rota på prosjektet... Fremdeles undefined
        Endret til å lagre det i en fil som heter .env istedenfor local.settings.json. Det fungerte.
        Men får cors problemer når jeg kjører run and debug. FUngerer med å starta vha swa

01.03.2023
    - Funnet ut litt mer rund environment variabler.
        Legger variabler i .env fil på rota av prosjektet
        Bruker deretter en if setning for å finne ut om development eller production
        Og henter henholdsvis local eller azure verdi.
        Det funka bra.

    - Det som er irriterende nå er at jeg må starte applikasjonen via swa kommando hvis
      api skal funke uten CORS feil.
      Det er forsåvidt greit nok, men da må jeg kjøre npm run build og swa-kommando for hver minste
      endring jeg ønsker å teste....

    - Fant løsning på CORS:
        La til følgende i local.settings.json:
            "Host": {
                "LocalHttpPort": 7071,
                "CORS": "*"
            }

02.03.2023
    - Prøvd å sette opp epost-sending. 
        Foreløpig dårlig resultat.....

    - Prøve med Sendgrid sin egen npm tror jeg. Men via egen api...
        Må installere sendgrid først:
            npm install --save @sendgrid/mail
            NB: Måtte gjøres i api-mappen
            Gjorde det først i rota, men da funka api ikke i azure, kun lokalt.
        Funker etter litt om og men....

    - Fått lagt om slik at får velkommen melding hvis skriving til db ok feilmelding hvis ikke.
    
    - Må få lagt inn en sjekk om e-post adresse eksisterer fra før.
        Må derfor få laget en api og funksjon som leser databasen, kanskje inn i et array?
        Tror derfor jeg starter på en komponent for admin.
            Logg inn. Legge inn e.post adresse - verifisere med kode.
            Form for å registrere nye medlemmer, nb: pluss rolle og status
            Liste over alle medlemmer
                Med knapper for å slette, redigere, endre rolle og status
    - Startet med å kopiere MemberForm.js til MemberFormAdmin.js og foretok noen justeringer.
        Mere må til....
    
03.03.2023
    - klonet repository til pc på jobb.
        Installerte node.js 16 på den pc    
            Prøvde først med 18, men da funker ikke swa...
    - Fjernet .env fra rota, da jeg har lagt variabler direkte i kode.
    
    - Det er et problem med at sendEmail api ikke avsluttes på et vis. status i dev-console\network er pending
        Får til slutt en timeout
        Selv om e-post faktisk blir sendt.
        Endret funksjonen til å være async, ser nå ut til å fungere bedre.
        


    - Fortsatt på memberFormAdmin. 
        Lagt til status og rolle.

    - Startet på api/function for å lese db
        Kommet så langt at jeg har laget api/function som kjører en sql query
            Select * from documents og leser da alle dokumenter.
            Sender dette til front-end og presenterer i Console
            Neste blir å "strippe" json og lagre i et array.
            Samt presentere i en tabell.

04.03.2023
    - Utfordringer med at react vil rendre data før de er klar.
        Løste dette vha https://www.geeksforgeeks.org/how-to-wait-for-a-reactjs-component-to-finish-updating/
    
    - Må få laget slik at MemberForm for lest inn alle medlemmer slik at man får sjekket
      epost eksisterer fra før.
      Tenkte da at det kan være lurt å lage en gjenbrukbar funksjon.
        Opprettet egen mappe under src kalt functions.
        Opprettet readAllMembers.js
        lager er funksjon der for å lese db og hente ut alle medlemmer til et array.
    - Opprettet funksjon for å hente inn alle medlemmer til array
    - Opprettet funksjon for å sjekke om e-post adresse eller telefonnummer eksisterer fra før
    - Ordnet kontroll slik at man ikke kan registrere duplikater (e-post og telefonnummer)
    - Opprettet en login komponent, men gjenstår en del her....

05.03.2023
    - Opprettet en enkel variant av login.
        prompt for e-post adresse.
        Hvis epost adresse eksisterer og bruker er admin eller superbruker
        får man opp admin-form og alle medlemmer listes opp.
!!  - Vurdere å legge inn en sperre på å liste opp alle medlemmer i api...
    - Neste blir å få lagret login-state i local storage (med kryptering-ish)
        Dette er nå ordnet, men foreløpig uten kryptering.
        Må vurdere å lage en ny api, som henter en "nøkkel" fra 
        application settings/local.settings.json.
    - Installert react-modal
    - Startet med å legge til en modal i MemberList
        Skal åpnes når man trykker på et medlem.
    - Begynte med å forenkle api oppkallene.
        Bruker fetch isteden for.
        Tok litt tid før jeg fant ut hvordan man sender data til api.
        Må vel også skrive om der det sendes e-post og skrives til db... Det er gjort 06.03.2023

06.03.2023
    - Skrevet om DBWrite api    
        Lagt til oppslag på id, hvis id, kjøres bindingen for å oppdatere eksisterende medlem
        Hvis ikke kjøres binding for å legge til nytt medlem.
    - Skrevet om funksjon for lagring av nytt medlem. Lagt dette i en egen fil under functions.
    - Lagt til funksjon i egen fil for oppdatering av eksisterende medlem.
    - Oppdatering av eksisterende medlem funker ikke helt. 
        Det blir opprettet nytt medlem istedenfor.
        La til eksisterende id i json strengen som sendes. (naturligvis)
    - I tillegg funker ikke bygging til Azure.
        Dette pga at react mener memerArray må ligge i dependency på useEffect i memberList..
        Denne er litt vrien. Må få memberlist til å rendre alle medlemmer, men uten at det går i loop...

    - Ryddet opp i alle komponenter og funksjoner   
        Fjernet console.log oppføringer.
    - Ryddet opp alle api-oppkallinger til å bruke fetch.

    - Prøve å få lagt til en knapp for å slette medlem også.

07.03.2023
    - Forenklet api DBWrite. Istedenfor å sette const for alle verdier, så sendes alle verdier
      rett til db. Man bestemmer da i front-ende hvor mange verdier som lagres.
    - Laget knapp for å slette medlem.
        Finner ikke noen måte å slette et document i cosmos db.
        Får bare markere som slettet i stedenfor.
        Sliter litt med queryen for å filtrere bort de som er merket slettet.
        Endret query til å filtrere på kun deleted = false. Den taklet ikke å filtrere hvis property ikke er definert
        Endret slette funksjonen til å også anonymisere document.
    - Alle basic funksjonene er vel nå på plass.
    - Startet med litt styling.


    - Står igjen:
        - pynting
        - excel-eksport
        - medlemskontingent


08.03.2023
    - Fortsatt med styling.
    - Lage hamburgermeny for å vise innlogget/utlogget, samt knapp 
        for å logge inn/ut.
        Fant en brukbar måte å gjøre dette på.
        Men tror jeg vil gjøre den om til at en modal kommer opp
        når hamburger trykkes.

14.03.2023
    - Flyttet hamburger funksjon inn i homepage.js.
        Dette gjorde det enklere å håndtere innlogging / utlogging.

15.03.2023
    - Lagt til postnr i skjema.
    - Lagt til eksport av medlemmer til csv

    Neste: lage en løsning som sender e-post med en link der bruker får lastet ned en pdf (faktura) (anonym link?)
    Må også legge til valg for om vedkommende vil betale via vipps eller e-post faktura.

28.03.2023
    - Har sendt inn søknad om vipps handel på nett m.m
    - Fått delvis godkjent og kan begynne å teste.
    - Installert Vipps-test app på telefonen min.
    - Skal nå i første omgang teste med postman mot vipps sine apier for å se hvordan ting funker.
        Testet med postman og det virker forholdsvis greit. 
        Neste blir å teste i app, samt fordype seg litt.
        - Tenker å kjøre en agreement med initial charge.
        - Må undersøke det med interval her. Kan man f.eks sette datoer?
        - Sørge for at folk ikke blir belastet flere ganger samme år.
        - Går an for app å hente alle agreements, f.eks til et array og så kan appen sjekke opp i mot kunde databasen
        - Sette agreement-id til medlems id kanskje, samme med ordrenr (som jeg tror MÅ være med)
        - 

29.03.2023
    - Opprettet vippsfunctions.js
        Tenkt å putte alle vipps-funksjoner inn i denne som kan importeres og brukes fra andre components
    - Lagde første funksjon der. get access token - Denne for å starte en "sesjon" mot vipps.
    - Men sliter med cors Problemer....
    - Tror jeg må bruke egen api for å kalle opp vipps-apier. Dette vil antakeligvis løse cors problem pluss at jeg kan lagre keys på en sikker måte....
    
30.03.2023
    - Opprettet api Vipps.
    - Litt trøbbel med å få ting til å funke, blant annet fordi funksjonen fetch måtte installeres
        OG den må importeres som require og ikke vha import inne i funksjonen i index.js.
        Måtte installere node-fetch versjon 2.0 vha npm install node-fetch@2.0
    - Funker når jeg kjører lokalt, men ikke via Azure. Antar dette er fordi dette er en server-less løsning
        og jeg ikke får installert node-fetch der. Feilmelding i app-insights tilsier også dette.
        Mulig det går an å gjøre dette på en annen måte...?
    - Hadde jo installert node-fetch på rota av prosjektet. Etter jeg installerte node-fetch i api-katalogen og 
        kjørte commit, så fungerte det i azure også.
        Litt rart at det funka lokalt før jeg installerte i api-katalogen......
    - Flyttet vipps - client id og secret m.m til application settings.
    - Begynt med å lage funksjoner i api for de forskjellige vipps-funksjonene.
        draft agreement with initian charge.

31.03.2023
    - Opprettet vipps funksjon for å oprette avtale.
        Ikke fått helt til dette. Usikker om headers sendes korrekt..   
        Manglet teksten bearer foran accesstoken!!!
    - Foreløpig er følgende api-funksjoner operative:
        get-access-token : Denne kjøres for alle api-kall (vipps) for å hente accesstoken
        create-agreement (med initiell belastning) : For å opprette en avtale på et medlem, samt ta betalt for inneværende år.
        get-agreement : For å hente status og info om avtale
        get-charge : For å hente status og historikk om belastninger

    - Forenklet kode. Bruke samme funksjon for alle vipps-api oppkall, bare med forskjellig data (body)


01.04.2023
    - Opprettet flere apier
        charge : For å belaste medlem for årets kontingent.
        update agreement : for å endre beløp eller stoppe agreement.
            NB: Ikke testet 100%
    - Rensket opp litt i fetch-url for api mot vipps.
        Gjør det enklere å endre til produksjon når den tid kommer.
        Bare å endre en const i Vipps api (index.js)
    - Neste blir nå å få på plass disse funksjonene på de faktiske medlemmene
        Både på member-form, samt memberformadmin.
        Pluss at medlemmer må kunne logge på og endre seg selv.
        Og legge til noe lagring til database 
        - På medlemmer må man lagre agreementid
            Tror det er nok for da kan man hente resten fra vipps
        - Lagre beløp, slik at man enkelt kan endre kontingenten.
        
02.04.2023
    - Startet prosess med å få implementert vipps funksjoner ved registrering av medlemmer
        Startet med memberForm. 
        Problemer med å hente ut memberid, da jeg sliter med å sende dette tilbake
        Må enten gjøre om på hvordan data hentes fra response, eller opprette member-id fra memberform...
        

03.04.2023
    - Lagt til spørsmål om vipps eller e-post på memberform (må gjøre det samme på memberformadmin)
        Må også legge til funksjon som sjekker hva som er valgt når det skal sendes faktura
    - Prøvde å lage til funksjon som sender vipps-krav (avtale med initiell krav) når registrert.
        Det fungerer, men må få tak i url og videresende bruker til denne.
        Må nok vente på svar fra api her. Kanskje bruke samme metode som i vippsfunctions med .then osv.
    - Fikset dette med å legge til await på fetch i vippsfunctions.js
    - Fikk hentet ut confirmation url fra api-responsen.
        Litt usikker på  hvordan jeg best skal håndtere dette i etterkant.
        Prøvde først med å åpne ekstern link i iframe i en modal.
        Men når vipps-siden er ferdig eller avbrytes vil vipps redirecte til bdmi-hovedsiden (inni iframe og modal).
        Kanskje det finnes en funksjon å bruke som lytter på når iframe bytter nettside?

04.04.2023
    - Ide for prosess ved vipps:
        redirecte eksisterende vindu til vipps. Når vipps er ferdig, vil den åpne hovedsiden igjen.
        Bruke localstorage til å lagre bruker som pålogget, slik at vedkommende kommer rett inn på sin bruker.

05.04.2023
    - Prøver å gjennomføre ideen fra i går.
        Endret funksjonen som sjekker om godkjent bruker, slik at den gir tilbakemelding om bruker eksisterer
        og hva slags rolle den har. Så er det en if statement som bestemmer hvilken return som kjøres. ut ifra hvilken rolle man har.
        La også til i funksjonen for å registrere medlem at man blir lagret i localstorage.
        Opprette ny komponent for redigering av seg selv som medlem.

        Funker delvis. Bruker blir pålogget og det huskes i local-storage
        Men har glemt å endre hvordan vipps-linken åpnes. Denne må endres fra iframe, til en redirect eller lignende
        Må også endre komponenten for å redigere seg selv (MemberFormUser). Denne åpnes uten data.

30.04.2023
    - Oppstart igjen etter lengre tids opphold.'
    - Endret til å redirecte til vipps confirmation url
        NB: Kunne ikke bruke usestate til dette, da denne ikke oppdatere raskt nok.
        Altså setConfirmationUrl rekker ikke å gjøre jobben før neste linje kjøres, så hentet url direkte fra api-response.
        Ved første test, så det greit ut, men bildet forsvant og vipps redirectet tilbake til hjemmeside før uten at det kom opp i app
        Dette kan være pga at avtale allerede var gjort....
!        må få laget en funksjon for å si opp avtale.
    - Funker ikke med logg inn (ihvertfall ikke for ikke-admins). E-post blir ikke sendt.
        Dette pga at programmet kun sendte e-post hvis admin eller superbruker.
        Endret dette og da sendes e-post
    - Men får feilmelding på firstname. Må sjekke kode...
        Feiler fordi data er ikke lest inn i array fra readGivenMember.
        Årsaken ser ut til å være at funksjonen trenger db-id og jeg har oppgitt bruker-epost til funksjonen....
        Fikset dette
        Problem med at usestate kjøres konstant.'
        Løste dette ved å bruke useEffect.

    Må få lagt til litt på memberform og memberadmin form......


Tips for senere:
    - Autentisering (pluss database):
        https://dev.to/c_arnab/serverless-in-azure-using-static-web-apps-functions-and-cosmos-db-506j

    
Test mobilnr: 99576014

